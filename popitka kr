#include <iostream>

using namespace std;



class VectorN
{
private:
    int n;
    int vec[32];
public:
    // Конструктор вектора размерности n
    VectorN(int n)
    {
        this->n = n;
    };
    // Деструктор !!! вся проблема в нём, не успел!!!
    ~VectorN()
    {
        delete vec;
    }

    // Получение размерности вектора
    int getSize() const
    {
        return this->n;
    }


    int getValue(unsigned int i) const
    {
        return this->vec[i];
    }

    void setValue(unsigned int i, int value)
    {
        this->vec[i] = value;
    }


    bool operator == (const VectorN &rhs)
    {
        for (int i = 0; i < n; i++)
            if (this->vec[i] != rhs.vec[i])
                return false;
        return true;
    }

    bool operator != (const VectorN &rhs)
    {
        for (int i = 0; i < n; i++)
            if (this->vec[i] != rhs.vec[i])
                return true;
        return false;
    }
    VectorN operator + (const VectorN &rhs)
    {
        VectorN* v =  new VectorN(n);
        for (int i = 0; i < n; i++)
        v->vec[i] = this->vec[i] + rhs.vec[i];
        return *v;
    }

    VectorN operator * (int alpha)
    {
        VectorN* v =  new VectorN(n);
        for (int i = 0; i < n; i++)
        v->vec[i] = this->vec[i] * alpha;
        return *v;
    }

    friend VectorN operator * (int alpha, const VectorN &rhs);

};

VectorN operator * (int alpha, const VectorN &rhs)
{
    VectorN* v =  new VectorN(rhs.n);
        for (int i = 0; i < rhs.n; i++)
        v->vec[i] = rhs.vec[i] * alpha;
        return *v;
}


int main()
{
    VectorN& a = * new VectorN (4);
    a.setValue(0, 3);
    a.setValue(1, 3);
    a.setValue(2, 3);
    a.setValue(3, 3);
    VectorN& b = * new VectorN (4);
    b.setValue(0, 1);
    b.setValue(1, 1);
    b.setValue(2, 1);
    b.setValue(3, 1);

    cout << (a == (3*b)) << endl;
    cout << "Hello world!" << endl;
    return 0;
}
