#include <stdio.h>
#include<stdlib.h>

// Struct to store tree element
typedef struct tree_element {
	int value;			// Element value
	struct tree_element* left;	// Pointer to left subtree
	struct tree_element* right;	// Pointer to right subtree
} tree_element;

// Create new element, set its value to 'i', return pointer to new element
tree_element* create_tree_element(int i)
{
    return malloc(sizeof(tree_element));
}

// Insert element 'elem' into tree 'root' СПОСОБ БЕЗ БАЛАНСИРОВКИ
tree_element* insert_into_tree(tree_element* root, tree_element* elem)
{
    tree_element* root1 = root;
    while(root->value != elem->value)
    {
        if (elem->value < root->value)
        {
            if(root->left == NULL)
            {
                root->left = elem;
                return root1;
            }
            root = root->left;
        }
        else
        {
            if(root->right == NULL)
            {
                root->right = elem;
                return root1;
            }
            root = root->right;
        }
    }
}


// Print tree
void print_tree(tree_element* cur_element)
{
    if (cur_element->left != NULL)
    {
        print_tree(cur_element->left);
    }
    printf("%d", cur_element->value);
    if (cur_element->right != NULL)
    {
        print_tree(cur_element->right);
    }
}

// Search for given value in the tree
// Returns pointer to found element and NULL otherwise
tree_element* search_by_value(tree_element* root, int value)
{
    while(root != NULL && root->value != value)
    {
        if (value < root->value)
        {
            root = root->left;
        }
        else
        {
            root = root->right;
        }
    }
    return root;
}

// Deletes element from the tree
tree_element* delete_from_tree(tree_element* root, tree_element* elem)
{
    tree_element* buf = elem;
    if(elem->right == NULL)
    {
        if(elem->left == NULL)
        {
            free(buf);
            return root;
        }
        else
        {
            elem = elem->left;
            free(buf);
            return root;
        }
    }
    else
    {
        elem = elem->right;
        free(buf);
        return root;

    }

}
